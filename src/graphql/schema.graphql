type Application {
  applicant: User
  content: String
  id: ID
  links: [Link!]
  metadata: JSON
  milestones: [Milestone!]
  name: String
  price: String
  status: ApplicationStatus
}

enum ApplicationStatus {
  approved
  completed
  pending
  rejected
  withdrawn
}

input CheckMilestoneInput {
  id: String!
  status: CheckMilestoneStatus!
}

enum CheckMilestoneStatus {
  completed
  pending
}

type Comment {
  author: User
  content: String
  createdAt: Date
  id: ID
  parent: Comment
  post: Post
  replies: [Comment!]
}

input CreateApplicationInput {
  content: String!
  links: [LinkInput!]
  metadata: JSON
  name: String!
  price: String!
  programId: String!
}

input CreateCommentInput {
  content: String!
  parentId: ID
  postId: ID!
}

input CreateMilestoneInput {
  applicationId: String!
  currency: String! = "ETH"
  description: String
  links: [LinkInput!]
  price: String!
  title: String!
}

input CreatePostInput {
  content: String!
  image: Upload
  keywords: [ID!]
  title: String!
}

input CreateProgramInput {
  currency: String
  deadline: String!
  description: String
  keywords: [ID!]
  links: [LinkInput!]
  name: String!
  network: String
  price: String!
  summary: String
  validatorId: ID!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input FilterInput {
  field: String!
  value: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Keyword {
  id: ID
  name: String
}

type Link {
  title: String
  url: String
}

input LinkInput {
  title: String
  url: String
}

type Milestone {
  currency: String
  description: String
  id: ID
  links: [Link!]
  price: String
  status: MilestoneStatus
  title: String
}

enum MilestoneStatus {
  completed
  failed
  pending
  revision_requested
}

type Mutation {
  acceptProgram(id: ID!): Program
  approveApplication(id: ID!): Application
  checkMilestone(input: CheckMilestoneInput!): Milestone
  createApplication(input: CreateApplicationInput!): Application
  createComment(input: CreateCommentInput!): Comment
  createMilestones(input: [CreateMilestoneInput!]!): [Milestone!]
  createPost(input: CreatePostInput!): Post
  createProgram(input: CreateProgramInput!): Program
  createUser(input: UserInput!): User
  deleteProgram(id: ID!): Boolean
  deleteUser(id: ID!): User
  denyApplication(id: ID!): Application
  login(address: String, email: String!, network: String, userId: ID!, walletId: String): String
  markNotificationAsRead(id: ID!): Notification
  publishProgram(educhainProgramId: Int!, id: ID!, txHash: String!): Program
  rejectProgram(id: ID!): Program
  submitMilestone(input: SubmitMilestoneInput!): Milestone
  updateApplication(input: UpdateApplicationInput!): Application
  updateComment(input: UpdateCommentInput!): Comment
  updateMilestone(input: UpdateMilestoneInput!): Milestone
  updatePost(input: UpdatePostInput!): Post
  updateProfile(input: UserUpdateInput!): User
  updateProgram(input: UpdateProgramInput!): Program
  updateUser(input: UserUpdateInput!): User
}

type Notification {
  action: NotificationAction
  content: String
  entityId: ID
  id: ID
  metadata: JSON
  readAt: Date
  title: String
  type: NotificationType
}

enum NotificationAction {
  accepted
  broadcast
  completed
  created
  rejected
  submitted
}

enum NotificationType {
  application
  comment
  milestone
  program
  system
}

type PaginatedApplications {
  count: Int
  data: [Application!]
}

type PaginatedComments {
  count: Int
  data: [Comment!]
}

type PaginatedMilestones {
  count: Int
  data: [Milestone!]
}

type PaginatedPosts {
  count: Int
  data: [Post!]
}

type PaginatedPrograms {
  count: Int
  data: [Program!]
}

type PaginatedUsers {
  count: Int
  data: [User!]
}

input PaginationInput {
  filter: [FilterInput!]
  limit: Int
  offset: Int
  sort: SortEnum
}

type Post {
  author: User
  content: String
  createdAt: Date
  id: ID
  image: String
  keywords: [Keyword!]
  title: String
}

type Program {
  applications: [Application!]
  creator: User
  currency: String
  deadline: Date
  description: String
  educhainProgramId: Int
  id: ID
  keywords: [Keyword!]
  links: [Link!]
  name: String
  network: String
  price: String
  status: ProgramStatus
  summary: String
  txHash: String
  validator: User
}

enum ProgramStatus {
  cancelled
  closed
  completed
  draft
  payment_required
  published
}

type Query {
  application(id: ID!): Application
  applications(pagination: PaginationInput): PaginatedApplications
  comment(id: ID!): Comment
  comments(pagination: PaginationInput, topLevelOnly: Boolean = false): PaginatedComments
  commentsByPost(postId: ID!): [Comment!]
  countNotifications: Int
  keywords: [Keyword!]
  milestone(id: ID!): Milestone
  milestones(applicationId: ID!, pagination: PaginationInput): PaginatedMilestones
  notifications: [Notification!]
  post(id: ID!): Post
  posts(pagination: PaginationInput): PaginatedPosts
  profile: User
  program(id: ID!): Program
  programs(pagination: PaginationInput): PaginatedPrograms
  user(id: ID!): User
  users(pagination: PaginationInput): PaginatedUsers
}

enum SortEnum {
  asc
  desc
}

input SubmitMilestoneInput {
  description: String
  id: String!
  links: [LinkInput!]
}

type Subscription {
  countNotifications: Int
  notifications: [Notification!]
}

input UpdateApplicationInput {
  content: String
  id: String!
  links: [LinkInput!]
  metadata: JSON
  name: String
  status: ApplicationStatus
}

input UpdateCommentInput {
  content: String
  id: ID!
}

input UpdateMilestoneInput {
  currency: String
  description: String
  id: String!
  links: [LinkInput!]
  price: String
  status: MilestoneStatus
  title: String
}

input UpdatePostInput {
  content: String
  id: ID!
  image: Upload
  keywords: [ID!]
  title: String
}

input UpdateProgramInput {
  currency: String
  deadline: String
  description: String
  id: ID!
  keywords: [ID!]
  links: [LinkInput!]
  name: String
  network: String
  price: String
  status: ProgramStatus
  summary: String
  validatorId: ID
}

scalar Upload

type User {
  about: String
  avatar: Upload
  email: String
  firstName: String
  id: ID
  image: String
  lastName: String
  links: [Link!]
  organizationName: String
  wallet: Wallet
}

input UserInput {
  about: String
  email: String!
  firstName: String
  image: Upload
  lastName: String
  links: [LinkInput!]
  organizationName: String
  password: String!
}

input UserUpdateInput {
  about: String
  firstName: String
  id: ID!
  image: Upload
  lastName: String
  links: [LinkInput!]
  organizationName: String
}

type Wallet {
  address: String
  network: String
  walletId: String
}