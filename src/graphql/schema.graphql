type Application {
  applicant: User
  comments: [Comment!]
  content: String
  currentFundingAmount: String
  fundingProgress: Float
  fundingSuccessful: Boolean
  fundingTarget: String
  id: ID
  investmentCount: Int
  investmentTerms: [InvestmentTerm!]
  investors: [Investor!]
  links: [Link!]
  metadata: JSON
  milestones: [Milestone!]
  name: String
  onChainProjectId: Int
  price: String
  program: Program
  rejectionReason: String
  status: ApplicationStatus
  summary: String
  walletAddress: String
}

enum ApplicationStatus {
  accepted
  completed
  pending
  rejected
  submitted
}

input AssignUserTierInput {
  maxInvestmentAmount: String!
  programId: ID!
  tier: InvestmentTier!
  userId: ID!
}

input BulkAssignTiersInput {
  assignments: [AssignUserTierInput!]!
  programId: ID!
}

type CarouselItem {
  displayOrder: Int
  id: ID
  isActive: Boolean
  itemId: String
  itemType: CarouselItemType
}

union CarouselItemData = Post | Program

enum CarouselItemType {
  post
  program
}

input CheckMilestoneInput {
  id: String!
  rejectionReason: String
  status: CheckMilestoneStatus!
}

enum CheckMilestoneStatus {
  completed
  rejected
}

type ClaimableFees {
  amount: String
  canClaim: Boolean
  claimedAt: DateTime
  feePercentage: Float
  pendingEndDate: DateTime
  reason: String
}

type Comment {
  author: User
  commentableId: String
  commentableType: String
  content: String
  createdAt: DateTime
  id: ID
  parent: Comment
  replies: [Comment!]
}

enum CommentableTypeEnum {
  application
  milestone
  post
  program
}

input CreateApplicationInput {
  content: String!
  fundingTarget: String
  investmentTerms: [CreateInvestmentTermInput!]
  links: [LinkInput!]
  metadata: JSON
  milestones: [CreateMilestoneInput!]!
  name: String!
  price: String!
  programId: String!
  status: ApplicationStatus!
  summary: String!
  walletAddress: String
}

input CreateCarouselItemInput {
  isActive: Boolean!
  itemId: String!
  itemType: CarouselItemType!
}

input CreateCommentInput {
  commentableId: ID!
  commentableType: CommentableTypeEnum!
  content: String!
  parentId: ID
}

input CreateInvestmentInput {
  amount: String!
  investmentTermId: ID
  projectId: ID!
  txHash: String
}

input CreateInvestmentTermInput {
  description: String
  price: String!
  purchaseLimit: Int
  title: String!
}

input CreateMilestoneInput {
  currency: String! = "ETH"
  deadline: DateTime!
  description: String!
  links: [LinkInput!]
  percentage: String!
  summary: String!
  title: String!
}

input CreatePostInput {
  content: String!
  image: Upload
  keywords: [ID!]
  summary: String!
  title: String!
}

input CreateProgramInput {
  applicationEndDate: DateTime
  applicationStartDate: DateTime
  contractAddress: String
  currency: String
  customFeePercentage: Int
  deadline: DateTime!
  description: String
  feePercentage: Int
  fundingCondition: FundingCondition
  fundingEndDate: DateTime
  fundingStartDate: DateTime
  image: Upload!
  keywords: [String!]!
  links: [LinkInput!]
  name: String!
  network: String!
  price: String!
  status: ProgramStatus = pending
  summary: String
  tierSettings: JSON
  type: ProgramType = regular
  visibility: ProgramVisibility
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type EnrichedCarouselItem {
  data: CarouselItemData
  displayOrder: Int
  id: ID
  isActive: Boolean
  itemId: String
  itemType: CarouselItemType
}

type FeeClaim {
  amount: String
  claimedAt: DateTime
  claimedBy: ID
  createdAt: DateTime
  id: ID
  programId: ID
  status: String
  txHash: String
}

input FilterInput {
  field: String!
  value: String
  values: [String!]
}

enum FundingCondition {
  open
  tier
}

type Investment {
  amount: String
  canReclaim: Boolean
  id: ID
  project: Application
  reclaimTxHash: String
  reclaimed: Boolean
  reclaimedAt: Date
  status: InvestmentStatus
  supporter: User
  tier: String
  txHash: String
}

type InvestmentStatsByStatus {
  applicationOngoing: Int
  fundingOngoing: Int
  programCompleted: Int
  projectOngoing: Int
  ready: Int
  refund: Int
}

enum InvestmentStatus {
  confirmed
  failed
  pending
  refunded
}

type InvestmentTerm {
  applicationId: ID
  createdAt: DateTime
  currentPurchases: Int
  description: String
  id: ID
  price: String
  purchaseLimit: Int
  remainingPurchases: Int
  title: String
  updatedAt: DateTime
}

enum InvestmentTier {
  bronze
  gold
  platinum
  silver
}

type Investor {
  amount: String
  createdAt: String
  email: String
  firstName: String
  investmentStatus: String
  lastName: String
  maxInvestmentAmount: String
  tier: String
  userId: ID
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Keyword {
  id: ID
  name: String
}

enum KeywordType {
  role
  skill
}

type Link {
  title: String
  url: String
}

input LinkInput {
  title: String
  url: String
}

type Milestone {
  """Whether this milestone can be reclaimed (unpaid past deadline)"""
  canReclaim: Boolean
  comments: [Comment!]
  currency: String
  deadline: DateTime
  description: String
  file: String
  id: ID
  links: [Link!]
  percentage: String
  price: String
  reclaimTxHash: String
  reclaimed: Boolean
  reclaimedAt: DateTime
  rejectionReason: String
  status: MilestoneStatus
  summary: String
  title: String
}

type MilestonePayout {
  amount: String
  createdAt: Date
  errorMessage: String
  id: ID
  investment: Investment
  milestone: Milestone
  percentage: String
  processedAt: Date
  status: PayoutStatus
  txHash: String
}

enum MilestoneStatus {
  completed
  draft
  pending
  rejected
  submitted
}

type Mutation {
  acceptApplication(id: ID!, onChainProjectId: Int, tierSyncInfo: TierSyncInfo): Application
  acceptProgram(id: ID!): Program
  addProgramKeyword(keyword: String!, programId: ID!): Keyword
  addUserKeyword(keyword: String!, type: KeywordType, userId: ID!): Keyword
  assignUserTier(input: AssignUserTierInput!): UserTierAssignment
  assignValidatorToProgram(programId: ID!, validatorId: ID!): Program
  banUser(reason: String, userId: ID!): User
  checkMilestone(input: CheckMilestoneInput!): Milestone
  claimProgramFees(programId: ID!, txHash: String!): FeeClaim
  createApplication(input: CreateApplicationInput!): Application
  createCarouselItem(input: CreateCarouselItemInput!): CarouselItem
  createComment(input: CreateCommentInput!): Comment
  createInvestment(input: CreateInvestmentInput!): Investment
  createInvestmentTerm(applicationId: ID!, input: CreateInvestmentTermInput!): InvestmentTerm
  createPost(input: CreatePostInput!): Post
  createProgram(input: CreateProgramInput!): Program
  createUser(input: UserInput!): User
  deleteCarouselItem(id: ID!): CarouselItem
  deleteInvestmentTerm(id: ID!): Boolean
  deleteProgram(id: ID!): Boolean
  deleteUser(id: ID!): User
  demoteFromAdmin(userId: ID!): User
  generateSwappedUrl(amount: String!, currencyCode: String!, userId: String!, walletAddress: String!): SwappedUrlResponse
  hidePost(id: ID!): Post
  hideProgram(id: ID!): Program
  incrementPostView(postId: ID!): Int
  inviteUserToProgram(maxInvestmentAmount: String, programId: ID!, tier: InvestmentTier, userId: ID!): Program
  login(email: String, loginType: String!, walletAddress: String!): String
  markAllNotificationsAsRead: Boolean
  markNotificationAsRead(id: ID!): Boolean
  processMilestonePayouts(input: ProcessPayoutsInput!): [MilestonePayout!]
  promoteToAdmin(userId: ID!): User
  reclaimInvestment(input: ReclaimInvestmentInput!): Investment

  """Reclaim funds from an unpaid milestone past its deadline"""
  reclaimMilestone(milestoneId: ID!, txHash: String): Milestone
  reclaimProgram(programId: ID!, txHash: String): Program
  rejectApplication(id: ID!, rejectionReason: String): Application
  rejectProgram(id: ID!, rejectionReason: String): Program
  removeProgramKeyword(keyword: String!, programId: ID!): Boolean
  removeUserFromProgram(programId: ID!, userId: ID!): Program
  removeUserKeyword(keyword: String!, type: KeywordType, userId: ID!): Boolean
  removeUserTier(programId: ID!, userId: ID!): Boolean
  removeValidatorFromProgram(programId: ID!, validatorId: ID!): Program
  reorderCarouselItems(items: [ReorderCarouselItemInput!]!): [CarouselItem!]
  showPost(id: ID!): Post
  showProgram(id: ID!): Program
  submitMilestone(input: SubmitMilestoneInput!): Milestone
  submitProgram(educhainProgramId: Int!, id: ID!, txHash: String!): Program
  syncApplicationTiers(applicationId: ID!): TierSyncResult
  unbanUser(userId: ID!): User
  updateApplication(input: UpdateApplicationInput!): Application
  updateCarouselItem(input: UpdateCarouselItemInput!): CarouselItem
  updateComment(input: UpdateCommentInput!): Comment
  updateInvestmentTerm(input: UpdateInvestmentTermInput!): InvestmentTerm
  updateMilestone(input: UpdateMilestoneInput!): Milestone
  updatePost(input: UpdatePostInput!): Post
  updateProfile(input: UserUpdateInput!): User
  updateProgram(input: UpdateProgramInput!): Program
  updateUser(input: UserUpdateInput!): User
  updateUserTier(input: AssignUserTierInput!): UserTierAssignment
}

type Notification {
  action: NotificationAction
  content: String
  entityId: ID
  id: ID
  metadata: JSON
  readAt: Date
  title: String
  type: NotificationType
}

enum NotificationAction {
  accepted
  broadcast
  completed
  created
  invited
  rejected
  submitted
}

enum NotificationType {
  application
  comment
  milestone
  program
  system
}

type PaginatedApplications {
  count: Int
  data: [Application!]
}

type PaginatedComments {
  count: Int
  data: [Comment!]
}

type PaginatedInvestments {
  count: Int
  data: [Investment!]
}

type PaginatedMilestonePayouts {
  count: Int
  data: [MilestonePayout!]
}

type PaginatedMilestones {
  count: Int
  data: [Milestone!]
}

type PaginatedPosts {
  count: Int
  data: [Post!]
}

type PaginatedPrograms {
  count: Int
  data: [Program!]
}

type PaginatedUsers {
  count: Int
  data: [User!]
}

input PaginationInput {
  filter: [FilterInput!]
  limit: Int
  offset: Int
  sort: SortEnum
}

enum PayoutStatus {
  completed
  failed
  pending
  processing
}

type Post {
  author: User
  comments: [Comment!]
  content: String
  createdAt: Date
  id: ID
  image: String
  keywords: [Keyword!]
  summary: String
  title: String
  viewCount: Int
  visibility: PostVisibility
}

enum PostVisibility {
  private
  public
  restricted
}

input ProcessPayoutsInput {
  contractAddress: String!
  milestoneId: ID!
}

type Program {
  applicationEndDate: DateTime
  applicationStartDate: DateTime
  applications: [Application!]

  """Whether this program can be reclaimed (unused past deadline)"""
  canReclaim: Boolean
  comments: [Comment!]
  contractAddress: String
  creator: User
  currency: String
  customFeePercentage: Int
  deadline: DateTime
  description: String
  detailedStatus: JSON
  educhainProgramId: Int
  feePercentage: Int
  fundingCondition: FundingCondition
  fundingEndDate: DateTime
  fundingStartDate: DateTime
  id: ID
  image: String
  invitedBuilders: [User!]
  keywords: [Keyword!]
  links: [Link!]
  maxFundingAmount: String
  name: String
  network: String
  price: String
  reclaimTxHash: String
  reclaimed: Boolean
  reclaimedAt: DateTime
  rejectionReason: String
  status: ProgramStatus
  summary: String
  supporters: [Supporter!]
  tierSettings: JSON
  txHash: String
  type: ProgramType
  userTierAssignment: UserTierAssignment
  validators: [User!]
  visibility: ProgramVisibility
}

type ProgramStatsByStatus {
  completed: Int
  confirmed: Int
  notConfirmed: Int
  paymentRequired: Int
  published: Int
  refund: Int
}

enum ProgramStatus {
  cancelled
  closed
  completed
  payment_required
  pending
  published
  rejected
}

enum ProgramType {
  funding
  regular
}

enum ProgramVisibility {
  private
  public
  restricted
}

type Query {
  adminUsers(includesBanned: Boolean, onlyBanned: Boolean, pagination: PaginationInput, role: UserRole): PaginatedUsers
  application(id: ID!): Application
  applications(pagination: PaginationInput): PaginatedApplications
  carouselItems: [EnrichedCarouselItem!]
  claimableFees(programId: ID!): ClaimableFees
  comment(id: ID!): Comment
  comments(pagination: PaginationInput, topLevelOnly: Boolean = false): PaginatedComments
  commentsByCommentable(commentableId: ID!, commentableType: CommentableTypeEnum!): [Comment!]
  countNotifications: Int
  getSwappedStatus(userId: String!): SwappedStatusResponse
  investment(id: ID!): Investment
  investmentTerm(id: ID!): InvestmentTerm
  investmentTermsByApplicationId(applicationId: ID!): [InvestmentTerm!]
  investments(pagination: PaginationInput, projectId: ID, supporterId: ID): PaginatedInvestments
  keywords: [Keyword!]
  milestone(id: ID!): Milestone
  milestonePayout(id: ID!): MilestonePayout
  milestonePayouts(investmentId: ID, milestoneId: ID, pagination: PaginationInput, status: PayoutStatus): PaginatedMilestonePayouts
  milestones(applicationId: ID!, pagination: PaginationInput): PaginatedMilestones
  notifications: [Notification!]
  post(id: ID!): Post
  posts(pagination: PaginationInput): PaginatedPosts
  profile: User
  program(id: ID!): Program
  programs(pagination: PaginationInput): PaginatedPrograms
  user(id: ID!): User
  users(pagination: PaginationInput): PaginatedUsers
}

input ReclaimInvestmentInput {
  investmentId: ID!
  txHash: String!
}

input ReorderCarouselItemInput {
  displayOrder: Int!
  id: String!
}

enum SortEnum {
  asc
  desc
}

input SubmitMilestoneInput {
  description: String
  file: Upload
  id: String!
  links: [LinkInput!]
  status: SubmitMilestoneStatus!
}

enum SubmitMilestoneStatus {
  draft
  submitted
}

type Subscription {
  countNotifications: Int
  notifications: [Notification!]
}

type Supporter {
  email: String
  firstName: String
  lastName: String
  maxInvestmentAmount: String
  tier: String
  userId: ID
  walletAddress: String
}

type SwappedStatusResponse {
  data: JSON
  message: String
  orderId: String
  status: String
}

type SwappedUrlResponse {
  originalUrl: String
  signature: String
  signedUrl: String
}

type TierAssignmentData {
  maxInvestmentAmount: String
  tier: String
  userId: String
  walletAddress: String
}

input TierSyncInfo {
  contractAddress: String!
  programOwnerAddress: String!
}

type TierSyncResult {
  contractAddress: String
  message: String
  projectId: Int
  success: Boolean
  tierAssignments: [TierAssignmentData!]
}

input UpdateApplicationInput {
  content: String
  id: String!
  links: [LinkInput!]
  metadata: JSON
  name: String
  status: ApplicationStatus
  summary: String
}

input UpdateCarouselItemInput {
  displayOrder: Int
  id: String!
  isActive: Boolean
  itemId: String
  itemType: CarouselItemType
}

input UpdateCommentInput {
  content: String
  id: ID!
}

input UpdateInvestmentTermInput {
  description: String
  id: String!
  price: String
  purchaseLimit: Int
  title: String
}

input UpdateMilestoneInput {
  currency: String
  deadline: DateTime
  description: String
  id: String!
  links: [LinkInput!]
  percentage: String
  status: MilestoneStatus
  summary: String
  title: String
}

input UpdatePostInput {
  content: String
  id: ID!
  image: Upload
  keywords: [ID!]
  summary: String
  title: String
}

input UpdateProgramInput {
  applicationEndDate: DateTime
  applicationStartDate: DateTime
  currency: String
  customFeePercentage: Int
  deadline: DateTime
  description: String
  feePercentage: Int
  fundingCondition: FundingCondition
  fundingEndDate: DateTime
  fundingStartDate: DateTime
  id: ID!
  image: Upload
  keywords: [String!]
  links: [LinkInput!]
  name: String
  network: String
  price: String
  status: ProgramStatus
  summary: String
  tierSettings: JSON
  type: ProgramType
  visibility: ProgramVisibility
}

scalar Upload

type User {
  about: String
  avatar: Upload
  banned: Boolean
  bannedAt: Date
  bannedReason: String
  email: String
  firstName: String
  id: ID
  image: String
  investmentStatistics: UserInvestmentStatistics
  keywords: [Keyword!]
  lastName: String
  links: [Link!]
  loginType: String
  organizationName: String
  programStatistics: UserProgramStatistics
  role: UserRole
  roleKeywords: [Keyword!]
  skillKeywords: [Keyword!]
  summary: String
  walletAddress: String
}

input UserInput {
  about: String
  email: String!
  firstName: String
  image: Upload
  keywords: [String!]
  lastName: String
  links: [LinkInput!]
  loginType: String
  organizationName: String
  password: String!
  summary: String
  walletAddress: String
}

type UserInvestmentStatistics {
  asHost: InvestmentStatsByStatus
  asProject: InvestmentStatsByStatus
  asSupporter: InvestmentStatsByStatus
}

type UserProgramStatistics {
  asBuilder: ProgramStatsByStatus
  asSponsor: ProgramStatsByStatus
  asValidator: ProgramStatsByStatus
}

enum UserRole {
  admin
  superadmin
  user
}

type UserTierAssignment {
  createdAt: DateTime
  currentInvestment: String
  maxInvestmentAmount: String
  remainingCapacity: String
  tier: String
  userId: ID
}

input UserUpdateInput {
  about: String
  email: String
  firstName: String
  id: ID!
  image: Upload
  keywords: [String!]
  lastName: String
  links: [LinkInput!]
  loginType: String
  organizationName: String
  roleKeywords: [String!]
  skillKeywords: [String!]
  summary: String
  walletAddress: String
}